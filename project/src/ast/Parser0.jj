PARSER_BEGIN(Parser)

package ast;
import java.util.ArrayList;
import java.util.List;


/** ID lister. */
public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  <TRUE: "true" >
  |
  <FALSE: "false" >
  |
  < NEW: "new" >
  |
  < IF : "if">
  |
  < THEN : "then">
  |
  < ELSE : "else">
  |
  < WHILE : "while">
  |
  < PRINT: "print" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < NUM: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LET : "let ">
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQ : "=" >
  |
  < SCN : ";" >
  |
  < CM : "," >
  |
  <AND: "&&" >
  |
  <OR: "||" >
  |
  <GREATER: ">" >
  |
  <LOWER: "<" >
  |
  <NOT: "~" >
  |
  <LEQUAL: "<=" >
  |
  <GEQUAL: ">=" >
  |
  <EQUALS: "==" >
  |
  <DIFF: "~=" >
  |
  <AFFECTATION: ":=" >
  |
  < DEREF: "!">
  |
  < DOUBLESCN : ";;" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Seq() <DOUBLESCN>
   { return t; }
}

ASTNode Seq() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Assign() ( ( op=<SCN> ) t2=Assign() 
                 { t1 = new ASTSeq(t1,t2); } 
               )*
     { return t1; } 
}

ASTNode Assign() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=BoolAdd() ( ( op=<AFFECTATION> ) t2=BoolAdd() 
                 { t1 = new ASTAssign(t1,t2); } 
               )*
     { return t1; } 
}

ASTNode BoolAdd() :
{Token op;
  ASTNode t1, t2;}
{
      t1=BoolMul() ( ( op=<OR> ) t2=BoolMul() 
                  { 
                    t1 = new ASTOr(t1,t2);
                  } 
                )*
      { return t1; }
}

ASTNode BoolMul() :
{Token op;
  ASTNode t1, t2;}
{
      t1=EqMult() ( op=<AND>  t2=EqMult() 
                  
                {t1 = new ASTAnd(t1,t2);}
                    
                )*
      { return t1; }
}

ASTNode EqMult() :
{Token op;
  ASTNode t1, t2;}
{
      t1=Rel() ( ( op=<EQUALS> | op=<DIFF> ) t2=Rel() 
                  { if (op.kind == EQUALS) 
                      t1 = new ASTEqual(t1,t2);
                    else
                      t1 = new ASTDiff(t1,t2);
                  } 
                )*
      { return t1; }
}

ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
      t1=Exp() ( ( op=<GREATER> | op=<LOWER> | op=<LEQUAL> | op=<GEQUAL> ) t2=Exp() 
                  { if (op.kind == GREATER) 
                      t1 = new ASTGreater(t1,t2);
                    else if (op.kind == LOWER) 
                      t1 = new ASTLower(t1,t2);
                    else if (op.kind == LEQUAL) 
                      t1 = new ASTLequals(t1,t2);
                    else 
                      t1 = new ASTGequals(t1,t2);
                  } 
                )?
      { return t1; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                    else
                      t1 = new ASTSub(t1,t2);
                 } 
               )*
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {
      if(op.kind == TIMES)
            t1 = new ASTTimes(t1, t2);
      else  t1 = new ASTDiv(t1, t2);
                 } 
		)?
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t, t2, t3;
  List<Entry> l;
  Entry entry;}
{
   ( n=<NUM> { t = new ASTNum(Integer.parseInt(n.image)); } 
    | n=<Id> 	{ t = new ASTId(n.image); }
    | (n=<TRUE> | n=<FALSE>) { t = new ASTBool(Boolean.parseBoolean(n.image)); }
    | <LPAR> t=Seq() <RPAR> 
    | <MINUS> t=Fact() { t = new ASTNeg(t);}
    | <NOT> t=Fact() { t = new ASTNot(t);} 
    | <NEW> t=Fact() { t = new ASTNew(t);} 
    | <DEREF> t=Fact() { t = new ASTDeref(t);}
    | <PRINT> t=Fact() {t = new ASTPrint(t);}
    | <IF> t=Seq() <LBRA> t2=Seq() <RBRA> <LBRA> t3=Seq() <RBRA> {	t =	new	ASTIf(t, t2, t3);	}
    | <WHILE> t=Seq() <LBRA> t2 = Seq() <RBRA> {	t =	new	ASTWhile(t, t2);	}
		|	<LBRA> {	l = new ArrayList<Entry>();	}	
								(	<LET>	n=<Id> <EQ> t=Exp()	<SCN>	{	
                  entry = new Entry(n.image, t);
                  l.add(entry); } )	+	t=Seq() <RBRA>
					{	t =	new	ASTDef(l, t);	}
  )
    { return t; } 
}